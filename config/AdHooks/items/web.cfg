# Configuration file

CraftingRecipe {

    main {
        # Amount of output units. [range: 0 ~ 64, default: 1]
        I:amount=1

        # Recipe components list.
        # Components should be represented by its ids.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too.
        # In addition you may use '*' char as meta value to specify all possible values.
        # Or you may use just NAME in ore dictionary format (examples: oreGold, gemDiamond, blockGrass) [default: [string]]
        S:components <
            string
         >

        # Output unit id.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too.
        # In addition you may use '*' char as meta value to specify all possible values.
        # Or you may use just NAME in ore dictionary format (examples: oreGold, gemDiamond, blockGrass) [default: web]
        S:output=web

        # Shaped recipe pattern in format <nnnn> or <nnnnnnnnn>.
        # Where 'n' - number of recipe component (from 1 to 9).
        # Zero value (0) is for empty slot.
        # If pattern is empty, then recipe will be treated as shapeless. [default: 101010101]
        S:pattern=101010101
    }

    reserve {
        # Amount of output units. [range: 0 ~ 64, default: 1]
        I:amount=1

        # Recipe components list.
        # Components should be represented by its ids.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too.
        # In addition you may use '*' char as meta value to specify all possible values.
        # Or you may use just NAME in ore dictionary format (examples: oreGold, gemDiamond, blockGrass) [default: [string]]
        S:components <
            string
         >

        # Output unit id.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too.
        # In addition you may use '*' char as meta value to specify all possible values.
        # Or you may use just NAME in ore dictionary format (examples: oreGold, gemDiamond, blockGrass) [default: web]
        S:output=web

        # Shaped recipe pattern in format <nnnn> or <nnnnnnnnn>.
        # Where 'n' - number of recipe component (from 1 to 9).
        # Zero value (0) is for empty slot.
        # If pattern is empty, then recipe will be treated as shapeless. [default: 101010101]
        S:pattern=101010101
    }

}


